diff -r rsh-redone-85/rlogin.c rlogind/rlogin.c
68a69
> 
80,121d80
< /* Convert termios speed to a string */
< 
< static char *termspeed(speed_t speed) {
<     switch(speed) {
<         case B0: return "0";
<         case B50: return "50";
<         case B75: return "75";
<         case B110: return "110";
<         case B134: return "134";
<         case B150: return "150";
<         case B200: return "200";
<         case B300: return "300";
<         case B600: return "600";
<         case B1200: return "1200";
<         case B1800: return "1800";
<         case B2400: return "2400";
<         case B4800: return "4800";
<         case B9600: return "9600";
<         case B19200: return "19200";
<         case B38400: return "38400";
<         case B57600: return "57600";
<         case B115200: return "115200";
< #ifdef B230400
<         case B230400: return "230400";
<         case B460800: return "460800";
<         case B500000: return "500000";
<         case B576000: return "576000";
<         case B921600: return "921600";
<         case B1000000: return "1000000";
<         case B1152000: return "1152000";
<         case B1500000: return "1500000";
<         case B2000000: return "2000000";
< #ifdef B2500000
<         case B2500000: return "2500000";
<         case B3000000: return "3000000";
<         case B3500000: return "3500000";
<         case B4000000: return "4000000";
< #endif
< #endif
<         default: return "9600";
<     }
< }
123a83
> 
148c108
<     char *term, *speed;
---
>     char *term;
228d187
< 
301,302d259
<     speed = termspeed(cfgetispeed(&tios));
< 
310c267
<     safecpy(&bufp[0], &len[0], speed, 0);
---
>     safecpy(&bufp[0], &len[0], "9600", 0);
340d296
< #if defined(ONLCR) && defined(OCRNL)
342d297
< #endif
349a305
> 
356a313
> 
412a370
> 
Only in src: rlogind
diff -r rsh-redone-85/rlogind.c rlogind/rlogind.c
34d33
< #include <security/pam_appl.h>
38d36
< #include <syslog.h>
40d37
< static char *argv0;
42,44c39,41
< static void usage(void) {
<     syslog(LOG_NOTICE, "Usage: %s", argv0);
< }
---
> extern void warn(char*, ...);
> #define syslog(a,...) warn(__VA_ARGS__)
> 
86,112d82
< /* PAM conversation function */
< 
< static ssize_t conv_read(int infd, int outfd, char *buf, size_t count, int echo) {
<     int len = 0, result;
< 
<     while (count) {
<         result = read(infd, buf, 1);
< 
<         if (result <= 0)
<             return result;
< 
<         if (!*buf)
<             continue;
< 
<         len++;
<         count--;
< 
<         if (*buf == '\r') {
<             if (write(outfd, "\n\r", 2) <= 0)
<                 return -1;
<             *buf = '\0';
<             return len;
<         }
< 
<         if (echo)
<             if (write(outfd, buf, 1) <= 0)
<                 return -1;
114,171c84
<         buf++;
<     }
< 
<     errno = ENOBUFS;
<     return -1;
< }
< 
< static int conv_h(int msgc, const struct pam_message **msgv, struct pam_response **res, void *app) {
<     int i, err;
<     char reply[1024];
< 
<     *res = malloc(sizeof *reply * msgc);
<     if (!*res)
<         return PAM_CONV_ERR;
<     memset(*res, '\0', sizeof *reply * msgc);
< 
<     for (i = 0; i < msgc; i++) {
<         switch(msgv[i]->msg_style) {
<             case PAM_PROMPT_ECHO_OFF:
<                 if (safewrite(1, msgv[i]->msg, strlen(msgv[i]->msg)) == -1)
<                     return PAM_CONV_ERR;
<                 err = conv_read(0, 1, reply, sizeof reply, 0);
<                 if (err <= 0)
<                     return PAM_CONV_ERR;
<                 res[i]->resp = strdup(reply);
<                 break;
<             case PAM_PROMPT_ECHO_ON:
<                 if (safewrite(1, msgv[i]->msg, strlen(msgv[i]->msg)) == -1)
<                     return PAM_CONV_ERR;
<                 err = conv_read(0, 1, reply, sizeof reply, 1);
<                 if (err <= 0)
<                     return PAM_CONV_ERR;
<                 res[i]->resp = strdup(reply);
<                 break;
<             case PAM_ERROR_MSG:
<                 if (safewrite(1, msgv[i]->msg, strlen(msgv[i]->msg)) == -1)
<                     return PAM_CONV_ERR;
<                 if (safewrite(1, "\n", 1) == -1)
<                     return PAM_CONV_ERR;
<                 break;
<             case PAM_TEXT_INFO:
<                 if (safewrite(1, msgv[i]->msg, strlen(msgv[i]->msg)) <= 0)
<                     return PAM_CONV_ERR;
<                 if (safewrite(1, "\n", 1) == -1)
<                     return PAM_CONV_ERR;
<                 break;
<             default:
<                 return PAM_CONV_ERR;
<         }
<     }
< 
<     return PAM_SUCCESS;
< }
< 
< int main(int argc, char **argv) {
<     struct sockaddr_storage peer_sa;
<     struct sockaddr *peer = (struct sockaddr *)&peer_sa;
<     socklen_t peerlen = sizeof peer_sa;
---
> int rlogind_main(struct sockaddr * peer, socklen_t peerlen) {
179d91
<     struct passwd *pw;
183d94
<     int opt;
201,204d111
<     pam_handle_t *handle;
<     struct pam_conv conv = {conv_h, NULL};
<     const void *item;
<     char *pamuser;
208,232d114
<     argv0 = argv[0];
< 
<     /* Process options */
< 
<     while ((opt = getopt(argc, argv, "+")) != -1) {
<         switch(opt) {
<             default:
<                 syslog(LOG_ERR, "Unknown option!");
<                 usage();
<                 return 1;
<         }
<     }
< 
<     if (optind != argc) {
<         syslog(LOG_ERR, "Too many arguments!");
<         usage();
<         return 1;
<     }
< 
<     /* Check source of connection */
< 
<     if (getpeername(0, peer, &peerlen)) {
<         syslog(LOG_ERR, "Can't get address of peer: %m");
<         return 1;
<     }
292,303d173
<     /* Start PAM */
< 
<     if ((err = pam_start("rlogin", luser, &conv, &handle)) != PAM_SUCCESS) {
<         safewrite(1, "Authentication failure\n", 23);
<         syslog(LOG_ERR, "PAM error: %s", pam_strerror(handle, err));
<         return 1;
<     }
< 
<     pam_set_item(handle, PAM_USER, luser);
<     pam_set_item(handle, PAM_RUSER, user);
<     pam_set_item(handle, PAM_RHOST, host);
<     pam_set_item(handle, PAM_TTY, tty);
312,382d181
<     /* Try to authenticate */
< 
<     err = pam_authenticate(handle, 0);
< 
<     /* PAM might ask for a new password */
< 
<     if (err == PAM_NEW_AUTHTOK_REQD) {
<         err = pam_chauthtok(handle, PAM_CHANGE_EXPIRED_AUTHTOK);
<         if (err == PAM_SUCCESS)
<             err = pam_authenticate(handle, 0);
<     }
< 
<     if (err != PAM_SUCCESS) {
<         safewrite(1, "Authentication failure\n", 23);
<         syslog(LOG_ERR, "PAM error: %s", pam_strerror(handle, err));
<         return 1;
<     }
< 
<     /* Check account */
< 
<     err = pam_acct_mgmt(handle, 0);
< 
<     if (err != PAM_SUCCESS) {
<         safewrite(1, "Authentication failure\n", 23);
<         syslog(LOG_ERR, "PAM error: %s", pam_strerror(handle, err));
<         return 1;
<     }
< 
<     /* PAM can map the user to a different user */
< 
<     err = pam_get_item(handle, PAM_USER, &item);
< 
<     if (err != PAM_SUCCESS) {
<         syslog(LOG_ERR, "PAM error: %s", pam_strerror(handle, err));
<         return 1;
<     }
< 
<     pamuser = strdup((char *)item);
< 
<     if (!pamuser || !*pamuser) {
<         syslog(LOG_ERR, "PAM didn't return a username?!");
<         return 1;
<     }
< 
<     pw = getpwnam(pamuser);
< 
<     if (!pw) {
<         syslog(LOG_ERR, "PAM_USER does not exist?!");
<         return 1;
<     }
< 
<     if (setgid(pw->pw_gid)) {
<         syslog(LOG_ERR, "setgid() failed: %m");
<         return 1;
<     }
< 
<     if (initgroups(pamuser, pw->pw_gid)) {
<         syslog(LOG_ERR, "initgroups() failed: %m");
<         return 1;
<     }
< 
<     err = pam_setcred(handle, PAM_ESTABLISH_CRED);
< 
<     if (err != PAM_SUCCESS) {
<         syslog(LOG_ERR, "PAM error: %s", pam_strerror(handle, err));
<         return 1;
<     }
< 
<     /* Authentication succeeded */
< 
<     pam_end(handle, PAM_SUCCESS);
477d275
< 
483d280
<         char *speed;
499,504d295
<         if ((speed = strchr(term, '/'))) {
<             *speed++ = '\0';
<             cfsetispeed(&tios, atoi(speed));
<             cfsetospeed(&tios, atoi(speed));
<         }
< 
514c305
<         execle("/bin/login", "login", "-p", "-h", host, "-f", pamuser, NULL, envp);
---
>         execle("/sbin/login", "login", "-p", user, NULL, envp);
Only in src: rlogind.o
Only in src: rlogin.o
